import{_ as o,r as p,o as c,c as l,a as n,b as t,F as u,d as s,e}from"./app.1656ed2a.js";const r={},i=n("h1",{id:"orao-vrf",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#orao-vrf","aria-hidden":"true"},"#"),s(" ORAO VRF")],-1),k=n("p",null,"ORAO VRF is a multi-party verifiable random function oracle based on EDDSA. It is able to provide 64 bytes of verifiable randomness in response to a randomness request.",-1),d=n("h2",{id:"basic-usage-scenario",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#basic-usage-scenario","aria-hidden":"true"},"#"),s(" Basic usage scenario")],-1),m=n("li",null,[s("Create a new randomness request. "),n("ul",null,[n("li",null,[s("This operation requires a unique "),n("em",null,"seed"),s(" to be given by the client. This seed is used for randomness verification.")])])],-1),b=n("li",null,[s("Use generated randomness as soon as request is fulfilled. "),n("ul",null,[n("li",null,"Oracle will fulfill new requests as soon as possible, this procedure includes the verification step, so no unverified randomness should appear on-chain.")])],-1),h=s("(Optional) Verify generated randomness off-chain. "),f=s("You are able to "),_={href:"https://github.com/orao-network/solana-vrf/blob/6cc9a80ec280b96a97321b8bfe2904a6e432c38e/rust/examples/off-chain/src/main.rs#L48",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"verify generated randomness",-1),g=s(" against the effective list of fulfillment authorities (it's a part of publicly available VRF configuration). There are helpers for this in SDKs."),v=n("h2",{id:"sdks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sdks","aria-hidden":"true"},"#"),s(" SDKs")],-1),w=n("p",null,"There are two SDKs available:",-1),x=s("The "),C={href:"https://docs.rs/orao-solana-vrf",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"orao-solana-vrf",-1),S=s(" crate \u2013 the code bellow is based on this Rust SDK."),R=s("The JS SDK \u2013 JavaScript SDK, as well as the source code of the Rust SDK, is available in the public repository on GitHub "),P={href:"https://github.com/orao-network/solana-vrf",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"solana-vrf",-1),T=s(". All tests within this repo are based on the JavaScript SDK."),A=n("h2",{id:"anatomy-of-a-randomness-request",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#anatomy-of-a-randomness-request","aria-hidden":"true"},"#"),s(" Anatomy of a randomness request")],-1),I=s("The "),E={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/state/struct.Randomness.html",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"RandomnessRequest",-1),F=s(" structure is used to store the requested randomness:"),N=n("ul",null,[n("li",null,[n("code",null,"seed"),s(" field \u2013 stores the request seed")]),n("li",null,[n("code",null,"randomness"),s(" field \u2013 this is the field of interest, that stores the fulfilled randomness. It will be zeroed until the randomness request is fulfilled.")]),n("li",null,[n("code",null,"responses"),s(" field \u2013 you may look at this field in case you are willing to perform off-chain verification (there are helpers for this in both SDKs)")])],-1),O=n("h2",{id:"anatomy-of-a-vrf-configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#anatomy-of-a-vrf-configuration","aria-hidden":"true"},"#"),s(" Anatomy of a VRF configuration")],-1),K=s("The "),B={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/state/struct.NetworkState.html",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"NetworkState",-1),L=s(" structure holds the on-chain VRF data. Here we'll talk about its "),U=n("code",null,"config",-1),z=s(", field, that stores the "),G={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/state/struct.NetworkConfiguration.html",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"NetworkConfiguration",-1),M=s(". The field that may be interesting to you are:"),W=n("ul",null,[n("li",null,[n("code",null,"request_fee"),s(" \u2013 randomness request will cost this many lamports")]),n("li",null,[n("code",null,"fulfillment_authorities"),s(" \u2013 public keys of fulfillment authorities")]),n("li",null,[n("code",null,"token_fee_cofig"),s(" - if defined, then it's possible to pay fees in SPL instead of SOL")])],-1),Y=n("h2",{id:"rust-native-example",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rust-native-example","aria-hidden":"true"},"#"),s(" Rust-native example")],-1),Z=s("This section will illustrate the off-chain usage ("),j={href:"https://github.com/orao-network/solana-vrf/tree/master/rust/examples/off-chain",target:"_blank",rel:"noopener noreferrer"},Q=s("full code is available on GitHub"),X=s(")"),$=n("h3",{id:"_1-setup-the-connection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-setup-the-connection","aria-hidden":"true"},"#"),s(" 1. Setup the connection")],-1),nn=s("Rust SDK is based on the "),sn={href:"https://docs.rs/anchor-client",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"anchor-client",-1),tn=s(" library, so you'll need to acquire the "),en=n("code",null,"Program",-1),on=s(" instance to use it:"),pn=e(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> payer<span class="token punctuation">:</span> <span class="token class-name">Keypair</span> <span class="token operator">=</span> <span class="token punctuation">..</span><span class="token punctuation">;</span> <span class="token comment">// get this from the solana configuration</span>
<span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new_with_options</span><span class="token punctuation">(</span><span class="token class-name">Cluster</span><span class="token punctuation">::</span><span class="token class-name">Devnet</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>payer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CommitmentConfig</span><span class="token punctuation">::</span><span class="token function">finalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> program <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">program</span><span class="token punctuation">(</span><span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-create-a-request" tabindex="-1"><a class="header-anchor" href="#_2-create-a-request" aria-hidden="true">#</a> 2. Create a request</h3>`,2),cn=s("There is a convenient "),ln={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/struct.RequestBuilder.html",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"RequestBuilder",-1),rn=s(" for this purpose:"),kn=e(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> seed <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tx <span class="token operator">=</span> <span class="token class-name">RequestBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>program<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Randomness request&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">send_with_spinner_and_config</span><span class="token punctuation">(</span><span class="token class-name">RpcSendTransactionConfig</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Transaction hash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-wait-for-fulfillment" tabindex="-1"><a class="header-anchor" href="#_3-wait-for-fulfillment" aria-hidden="true">#</a> 3. Wait for fulfillment</h3><p>There are multiple ways to wait for fulfillment including pub-sub, but this example will use a simple loop:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> randomness_address <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token function">randomness_account_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> randomness_account <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> program<span class="token punctuation">.</span><span class="token function">account</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Randomness</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>randomness_address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>randomness<span class="token punctuation">)</span> <span class="token keyword">if</span> randomness<span class="token punctuation">.</span><span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span> randomness<span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Randomness for seed {:?} is fulfilled with {:?}&quot;</span><span class="token punctuation">,</span> seed<span class="token punctuation">,</span> randomness_account<span class="token punctuation">.</span>randomness<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="cpi-example" tabindex="-1"><a class="header-anchor" href="#cpi-example" aria-hidden="true">#</a> CPI Example</h2>`,5),dn=s("CPI is an abbreviation for Cross Program Invocation \u2013 a way for one contract to call another contract within a single transaction. This section will illustrate this ("),mn={href:"https://github.com/orao-network/solana-vrf/tree/master/rust/examples/cpi",target:"_blank",rel:"noopener noreferrer"},bn=s("full code is available in on GitHub"),hn=s(")."),fn=n("p",null,"The contract we'll use to illustrate the CPI is a simple single-player Russian Roulette where the outcome of a round is derived from a fulfilled randomness.",-1),_n=n("p",null,[n("em",null,"Note:"),s(" the randomness will not be immediately available for your contract, so you'll need to design it in a way that it'll wait for randomness being fulfilled. In our example a player won't be able to start another round until the current one is finished (until the randomness is fulfilled).")],-1),yn=n("h3",{id:"_1-create-the-contract",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-create-the-contract","aria-hidden":"true"},"#"),s(" 1. Create the contract")],-1),gn=s("This examples is based on the "),vn={href:"https://github.com/coral-xyz/anchor",target:"_blank",rel:"noopener noreferrer"},wn=s("Anchor Framework"),xn=s(". Please consult the "),Cn={href:"https://book.anchor-lang.com/",target:"_blank",rel:"noopener noreferrer"},qn=s("Anchor Book"),Sn=s(" on how to create a contract."),Rn=e(`<p>To perform a CPI call you&#39;ll need to add the orao VRF rust SDK with the <code>cpi</code> feature into the list of your dependencies:</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token comment"># ...</span>
<span class="token key property">orao-solana-vrf</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2.3&quot;</span><span class="token punctuation">,</span> <span class="token key property">default-features</span> <span class="token punctuation">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cpi&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-collect-the-necessary-accounts" tabindex="-1"><a class="header-anchor" href="#_2-collect-the-necessary-accounts" aria-hidden="true">#</a> 2. Collect the necessary accounts</h3><p>Each Solana instruction requires a proper list of accounts. We&#39;ll need to call the Request instruction so here is the list of required accounts:</p><ul><li>payer \u2013 VRF client</li><li>network_state \u2013 VRF on-chain state address</li><li>treasury - address of the VRF treasury (taken from the VRF on-chain state)</li><li>request - PDA to store the randomness (derived from the seed)</li><li>system_program \u2013 required to create the request account</li></ul><p>Above means that our instruction needs all of these accounts besides it&#39;s own accounts. Particularly our Russian-Roulette instruction will require the following list of accounts:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Accounts)]</span>
#<span class="token punctuation">[</span><span class="token function">instruction</span><span class="token punctuation">(</span>force<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">SpinAndPullTheTrigger</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Player will be the \`payer\` account in the CPI call.</span>
    <span class="token attribute attr-name">#[account(mut)]</span>
    player<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// This is the player state account, it is required by Russian-Roulette to store player data</span>
    <span class="token comment">// (number of rounds played and info to derive the last round outcome)</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        init_if_needed<span class="token punctuation">,</span>
        payer <span class="token operator">=</span> player<span class="token punctuation">,</span>
        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">PlayerState</span><span class="token punctuation">::</span><span class="token constant">SIZE</span><span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token constant">PLAYER_STATE_ACCOUNT_SEED</span><span class="token punctuation">,</span>
            player<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    player_state<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">PlayerState</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// This account points to the last VRF request, it is necessary to validate that the player</span>
    <span class="token comment">/// is alive and is able to play another round.</span>
    <span class="token comment">/// CHECK:</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">RANDOMNESS_ACCOUNT_SEED</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player_state<span class="token punctuation">.</span>force<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump<span class="token punctuation">,</span>
        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token constant">ID</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    prev_round<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// This account is the current VRF request account, it&#39;ll be the \`request\` account in the CPI call.</span>
    <span class="token comment">/// CHECK:</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        <span class="token keyword">mut</span><span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">RANDOMNESS_ACCOUNT_SEED</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>force<span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump<span class="token punctuation">,</span>
        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token constant">ID</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    random<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// VRF treasury account, it&#39;ll be the \`treasury\` account in the CPI call.</span>
    <span class="token comment">/// CHECK:</span>
    <span class="token attribute attr-name">#[account(mut)]</span>
    treasury<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        <span class="token keyword">mut</span><span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">CONFIG_ACCOUNT_SEED</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump<span class="token punctuation">,</span>
        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token constant">ID</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token comment">/// VRF on-chain state account, it&#39;ll be the \`network_state\` account in the CPI call.</span>
    config<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">NetworkState</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// VRF program address to invoke CPI</span>
    vrf<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">OraoVrf</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// System program address to create player_state and to be used in CPI call.</span>
    system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h3 id="_3-perform-a-cpi-call" tabindex="-1"><a class="header-anchor" href="#_3-perform-a-cpi-call" aria-hidden="true">#</a> 3. Perform a CPI call</h3>`,8),Pn=s("In the Anchor Framework there is a "),Dn=n("code",null,"CpiContext",-1),Tn=s(" for this purpose (please consult the "),An={href:"https://book.anchor-lang.com/anchor_in_depth/CPIs.html",target:"_blank",rel:"noopener noreferrer"},In=s("corresponding section"),En=s(" of the Anchor Book):"),Vn=e(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> cpi_program <span class="token operator">=</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>vrf<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cpi_accounts <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span>cpi<span class="token punctuation">::</span>accounts<span class="token punctuation">::</span></span><span class="token class-name">Request</span> <span class="token punctuation">{</span>
    payer<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    network_state<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    treasury<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>treasury<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    request<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    system_program<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>system_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cpi_ctx <span class="token operator">=</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>context<span class="token punctuation">::</span></span><span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>cpi_program<span class="token punctuation">,</span> cpi_accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span>cpi<span class="token punctuation">::</span></span><span class="token function">request</span><span class="token punctuation">(</span>cpi_ctx<span class="token punctuation">,</span> force<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_4-use-the-fulfilled-randomness" tabindex="-1"><a class="header-anchor" href="#_4-use-the-fulfilled-randomness" aria-hidden="true">#</a> 4. Use the fulfilled randomness</h3><p>Our contract derives round outcome from the fulfilled randomness, round considered to be in-progress if randomness is not yet fulfilled:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// Last round outcome.</span>
<span class="token attribute attr-name">#[derive(Debug, Clone, Copy, PartialEq, Eq)]</span>
<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">CurrentState</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Player is alive and able to play.</span>
    <span class="token class-name">Alive</span><span class="token punctuation">,</span>
    <span class="token comment">/// Player is dead and can&#39;t play anymore.</span>
    <span class="token class-name">Dead</span><span class="token punctuation">,</span>
    <span class="token comment">/// Player is waiting for current round to finish.</span>
    <span class="token class-name">Playing</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Derives last round outcome.</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">current_state</span><span class="token punctuation">(</span>randomness<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Randomness</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">CurrentState</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>randomness<span class="token punctuation">)</span> <span class="token operator">=</span> randomness<span class="token punctuation">.</span><span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token function">is_dead</span><span class="token punctuation">(</span>randomness<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CurrentState</span><span class="token punctuation">::</span><span class="token class-name">Dead</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">CurrentState</span><span class="token punctuation">::</span><span class="token class-name">Alive</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">CurrentState</span><span class="token punctuation">::</span><span class="token class-name">Playing</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Decides whether player is dead or alive.</span>
<span class="token keyword">fn</span> <span class="token function-definition function">is_dead</span><span class="token punctuation">(</span>randomness<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
    <span class="token comment">// use only first 8 bytes for simplicyty</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> randomness<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">u64</span><span class="token punctuation">::</span><span class="token function">from_le_bytes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>`,4);function Fn(Nn,On){const a=p("ExternalLinkIcon");return c(),l(u,null,[i,k,d,n("ol",null,[m,b,n("li",null,[h,n("ul",null,[n("li",null,[f,n("a",_,[y,t(a)]),g])])])]),v,w,n("ol",null,[n("li",null,[x,n("a",C,[q,t(a)]),S]),n("li",null,[R,n("a",P,[D,t(a)]),T])]),A,n("p",null,[I,n("a",E,[V,t(a)]),F]),N,O,n("p",null,[K,n("a",B,[H,t(a)]),L,U,z,n("a",G,[J,t(a)]),M]),W,Y,n("p",null,[Z,n("a",j,[Q,t(a)]),X]),$,n("p",null,[nn,n("a",sn,[an,t(a)]),tn,en,on]),pn,n("p",null,[cn,n("a",ln,[un,t(a)]),rn]),kn,n("p",null,[dn,n("a",mn,[bn,t(a)]),hn]),fn,_n,yn,n("p",null,[gn,n("a",vn,[wn,t(a)]),xn,n("a",Cn,[qn,t(a)]),Sn]),Rn,n("p",null,[Pn,Dn,Tn,n("a",An,[In,t(a)]),En]),Vn],64)}var Bn=o(r,[["render",Fn]]);export{Bn as default};
