import{_ as p,r as o,o as c,c as l,a as n,b as e,F as u,d as s,e as t}from"./app.55b1b60c.js";const r={},i=n("h1",{id:"orao-vrf",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#orao-vrf","aria-hidden":"true"},"#"),s(" ORAO VRF")],-1),k=n("p",null,"ORAO VRF est un oracle \xE0 fonction al\xE9atoire v\xE9rifiable multipartite bas\xE9 sur EDDSA. Il est capable de fournir 64 octets al\xE9atoires v\xE9rifiables en r\xE9ponse \xE0 une requ\xEAte.",-1),d=n("h2",{id:"scenario-d-utilisation-de-base",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scenario-d-utilisation-de-base","aria-hidden":"true"},"#"),s(" Sc\xE9nario d'utilisation de base")],-1),m=n("li",null,[s("Cr\xE9ation d'une nouvelle requ\xEAte d'al\xE9atoire. "),n("ul",null,[n("li",null,[s("Cette op\xE9ration n\xE9cessite qu'une "),n("em",null,"seed"),s(" unique soit donn\xE9e par le client. Cette seed est utilis\xE9e pour la v\xE9rification du caract\xE8re al\xE9atoire.")])])],-1),b=n("li",null,[s("Utilisation du caract\xE8re al\xE9atoire g\xE9n\xE9r\xE9 d\xE8s que la requ\xEAte est trait\xE9e. "),n("ul",null,[n("li",null,"L'oracle traitera les nouvelles requ\xEAtes d\xE8s que possible. Cette proc\xE9dure inclut l'\xE9tape de v\xE9rification, de sorte qu'aucun \xE9l\xE9ment al\xE9atoire non v\xE9rifi\xE9 n'apparaisse sur la cha\xEEne.")])],-1),_=s("(Facultatif) V\xE9rification du caract\xE8re al\xE9atoire g\xE9n\xE9r\xE9 hors cha\xEEne. "),h=s("Vous \xEAtes en mesure de "),f={href:"https://github.com/orao-network/solana-vrf/blob/6cc9a80ec280b96a97321b8bfe2904a6e432c38e/rust/examples/off-chain/src/main.rs#L48",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"v\xE9rifier le caract\xE8re al\xE9atoire g\xE9n\xE9r\xE9",-1),g=s(" par rapport \xE0 la liste effective des autorit\xE9s de traitement (c'est une partie de la configuration VRF disponible publiquement). Il existe des aides pour cela dans les SDKs."),y=n("h2",{id:"sdks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sdks","aria-hidden":"true"},"#"),s(" SDKs")],-1),q=n("p",null,"Deux SDKs sont disponibles :",-1),x=s("Le crate "),C={href:"https://docs.rs/orao-solana-vrf",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"orao-solana-vrf",-1),S=s(" \u2013 le code ci-dessous est bas\xE9 sur ce SDK Rust."),R=s("Le SDK JS - SDK JavaScript, ainsi que le code source du SDK Rust, sont disponibles dans le d\xE9p\xF4t public sur GitHub "),D={href:"https://github.com/orao-network/solana-vrf",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"solana-vrf",-1),A=s(". Tous les tests de ce r\xE9pertoire sont bas\xE9s sur le SDK JavaScript."),I=n("h2",{id:"anatomie-d-une-requete-d-aleatoire",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#anatomie-d-une-requete-d-aleatoire","aria-hidden":"true"},"#"),s(" Anatomie d'une requ\xEAte d'al\xE9atoire")],-1),E=s("La structure "),V={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/state/struct.Randomness.html",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"RandomnessRequest",-1),F=s(" est utilis\xE9e pour stocker le caract\xE8re al\xE9atoire demand\xE9 :"),L=t('<ul><li>Champ <code>seed</code> - stocke la seed de la requ\xEAte</li><li>Champ <code>randomness</code> \u2013 c&#39;est le champ int\xE9ressant. Il stocke le caract\xE8re al\xE9atoire obtenu. Il sera vide jusqu&#39;\xE0 ce que la requ\xEAte d&#39;al\xE9atoire soit satisfaite.</li><li>Champ <code>responses</code> \u2013 vous pouvez regarder ce champ au cas o\xF9 vous seriez pr\xEAt \xE0 effectuer une v\xE9rification hors cha\xEEne. (il y a des aides pour cela dans chaque SDKs)</li></ul><h2 id="anatomie-d-une-configuration-vrf" tabindex="-1"><a class="header-anchor" href="#anatomie-d-une-configuration-vrf" aria-hidden="true">#</a> Anatomie d&#39;une configuration VRF</h2>',2),K=s("La structure "),T={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/state/struct.NetworkState.html",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"NetworkState",-1),z=s(" contient les donn\xE9es VRF de la cha\xEEne. Nous allons parler ici de son champ "),B=n("code",null,"config",-1),H=s(", qui stocke la "),U={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/state/struct.NetworkConfiguration.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"NetworkConfiguration",-1),G=s(". Les champs qui peuvent vous int\xE9resser sont les suivants :"),J=n("ul",null,[n("li",null,[n("code",null,"request_fee"),s(" \u2013 la requ\xEAte d'al\xE9atoire co\xFBtera ce nombre de lamports")]),n("li",null,[n("code",null,"fulfillment_authorities"),s(" \u2013 les cl\xE9s publiques des autorit\xE9s de traitement")]),n("li",null,[n("code",null,"token_fee_cofig"),s(" - s'il est d\xE9fini, alors il est possible de payer les frais en SPL au lieu de SOL")])],-1),M=n("h2",{id:"exemple-rust-natif",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#exemple-rust-natif","aria-hidden":"true"},"#"),s(" Exemple Rust-natif")],-1),Y=s("Cette section va illustrer l'utilisation hors cha\xEEne ("),Z={href:"https://github.com/orao-network/solana-vrf/tree/master/rust/examples/off-chain",target:"_blank",rel:"noopener noreferrer"},Q=s("le code complet est disponible sur GitHub"),W=s(")"),X=n("h3",{id:"_1-configurer-la-connexion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-configurer-la-connexion","aria-hidden":"true"},"#"),s(" 1. Configurer la connexion")],-1),$=s("Le SDK Rust est bas\xE9 sur la biblioth\xE8que "),nn={href:"https://docs.rs/anchor-client",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"anchor-client",-1),an=s(", vous devrez donc acqu\xE9rir l'instance "),en=n("code",null,"Program",-1),tn=s(" pour l'utiliser :"),pn=t(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> payer<span class="token punctuation">:</span> <span class="token class-name">Keypair</span> <span class="token operator">=</span> <span class="token punctuation">..</span><span class="token punctuation">;</span> <span class="token comment">// get this from the solana configuration</span>
<span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new_with_options</span><span class="token punctuation">(</span><span class="token class-name">Cluster</span><span class="token punctuation">::</span><span class="token class-name">Devnet</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>payer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">CommitmentConfig</span><span class="token punctuation">::</span><span class="token function">finalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> program <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">program</span><span class="token punctuation">(</span><span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-creer-une-requete" tabindex="-1"><a class="header-anchor" href="#_2-creer-une-requete" aria-hidden="true">#</a> 2. Cr\xE9er une requ\xEAte</h3>`,2),on=s("Il existe un "),cn={href:"https://docs.rs/orao-solana-vrf/latest/orao_solana_vrf/struct.RequestBuilder.html",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"RequestBuilder",-1),un=s(" tr\xE8s pratique \xE0 cet effet :"),rn=t(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> seed <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tx <span class="token operator">=</span> <span class="token class-name">RequestBuilder</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>program<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Randomness request&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">send_with_spinner_and_config</span><span class="token punctuation">(</span><span class="token class-name">RpcSendTransactionConfig</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Transaction hash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-attendre-le-traitement" tabindex="-1"><a class="header-anchor" href="#_3-attendre-le-traitement" aria-hidden="true">#</a> 3. Attendre le traitement</h3><p>Il existe de multiples fa\xE7ons d&#39;attendre le traitement, y compris la m\xE9thode pub-sub. L&#39;exemple suivant utilise une simple boucle :</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> randomness_address <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token function">randomness_account_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> randomness_account <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> program<span class="token punctuation">.</span><span class="token function">account</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Randomness</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>randomness_address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>randomness<span class="token punctuation">)</span> <span class="token keyword">if</span> randomness<span class="token punctuation">.</span><span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span> randomness<span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Randomness for seed {:?} is fulfilled with {:?}&quot;</span><span class="token punctuation">,</span> seed<span class="token punctuation">,</span> randomness_account<span class="token punctuation">.</span>randomness<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="exemple-cpi" tabindex="-1"><a class="header-anchor" href="#exemple-cpi" aria-hidden="true">#</a> Exemple CPI</h2>`,5),kn=s("CPI est l'abr\xE9viation de Cross Program Invocation, un moyen pour un contrat d'appeler un autre contrat dans une m\xEAme transaction. Cette section va l'illustrer ("),dn={href:"https://github.com/orao-network/solana-vrf/tree/master/rust/examples/cpi",target:"_blank",rel:"noopener noreferrer"},mn=s("le code complet est disponible sur GitHub"),bn=s(")."),_n=n("p",null,"Le contrat que nous utiliserons pour illustrer le CPI est une roulette russe \xE0 un joueur o\xF9 le r\xE9sultat d'un tour est d\xE9riv\xE9 d'un caract\xE8re al\xE9atoire.",-1),hn=n("p",null,[n("em",null,"Remarque :"),s(" le caract\xE8re al\xE9atoire ne sera pas imm\xE9diatement disponible pour votre contrat, vous devrez donc le concevoir de mani\xE8re \xE0 ce qu'il attende que le caract\xE8re al\xE9atoire soit rempli. Dans notre exemple, un joueur ne pourra pas commencer un autre tour avant que le tour actuel ne soit termin\xE9 (c'est \xE0 dire jusqu'\xE0 ce que le caract\xE8re al\xE9atoire soit rempli).")],-1),fn=n("h3",{id:"_1-creer-le-contrat",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-creer-le-contrat","aria-hidden":"true"},"#"),s(" 1. Cr\xE9er le contrat")],-1),vn=s("Ces exemples sont bas\xE9s sur le "),gn={href:"https://github.com/coral-xyz/anchor",target:"_blank",rel:"noopener noreferrer"},yn=s("Framework Anchor"),qn=s(". Veuillez consulter le "),xn={href:"https://book.anchor-lang.com/",target:"_blank",rel:"noopener noreferrer"},Cn=s("Livre d'Anchor"),wn=s(" pour savoir comment cr\xE9er un contrat."),Sn=t(`<p>Pour effectuer un appel CPI, vous devez ajouter le SDK Rust orao VRF avec la fonctionnalit\xE9 <code>cpi</code> dans la liste de vos d\xE9pendances :</p><div class="language-toml ext-toml line-numbers-mode"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token comment"># ...</span>
<span class="token key property">orao-solana-vrf</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2.3&quot;</span><span class="token punctuation">,</span> <span class="token key property">default-features</span> <span class="token punctuation">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cpi&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-collecter-les-comptes-necessaires" tabindex="-1"><a class="header-anchor" href="#_2-collecter-les-comptes-necessaires" aria-hidden="true">#</a> 2. Collecter les comptes n\xE9cessaires</h3><p>Chaque instruction Solana n\xE9cessite une liste de comptes appropri\xE9s. Nous devrons appeler l&#39;instruction Request, voici donc la liste des comptes requis :</p><ul><li>payer \u2013 client VRF</li><li>network_state \u2013 Adresse d&#39;\xE9tat du VRF sur la cha\xEEne</li><li>treasury - adresse de la tr\xE9sorerie du VRF (extrait de l&#39;\xE9tat du VRF sur la cha\xEEne)</li><li>request - PDA pour stocker le caract\xE8re al\xE9atoire (d\xE9riv\xE9 de la seed)</li><li>system_program \u2013 n\xE9cessaire pour cr\xE9er le compte de la requ\xEAte</li></ul><p>Cela signifie que notre instruction a besoin de tous ces comptes en plus de ses propres comptes. En particulier, notre instruction Russian-Roulette n\xE9cessitera la liste de comptes suivante :</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Accounts)]</span>
#<span class="token punctuation">[</span><span class="token function">instruction</span><span class="token punctuation">(</span>force<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">SpinAndPullTheTrigger</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Player will be the \`payer\` account in the CPI call.</span>
    <span class="token attribute attr-name">#[account(mut)]</span>
    player<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// This is the player state account, it is required by Russian-Roulette to store player data</span>
    <span class="token comment">// (number of rounds played and info to derive the last round outcome)</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        init_if_needed<span class="token punctuation">,</span>
        payer <span class="token operator">=</span> player<span class="token punctuation">,</span>
        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">PlayerState</span><span class="token punctuation">::</span><span class="token constant">SIZE</span><span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token constant">PLAYER_STATE_ACCOUNT_SEED</span><span class="token punctuation">,</span>
            player<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    player_state<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">PlayerState</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// This account points to the last VRF request, it is necessary to validate that the player</span>
    <span class="token comment">/// is alive and is able to play another round.</span>
    <span class="token comment">/// CHECK:</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">RANDOMNESS_ACCOUNT_SEED</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player_state<span class="token punctuation">.</span>force<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump<span class="token punctuation">,</span>
        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token constant">ID</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    prev_round<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// This account is the current VRF request account, it&#39;ll be the \`request\` account in the CPI call.</span>
    <span class="token comment">/// CHECK:</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        <span class="token keyword">mut</span><span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">RANDOMNESS_ACCOUNT_SEED</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>force<span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump<span class="token punctuation">,</span>
        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token constant">ID</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    random<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// VRF treasury account, it&#39;ll be the \`treasury\` account in the CPI call.</span>
    <span class="token comment">/// CHECK:</span>
    <span class="token attribute attr-name">#[account(mut)]</span>
    treasury<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        <span class="token keyword">mut</span><span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">CONFIG_ACCOUNT_SEED</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump<span class="token punctuation">,</span>
        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span></span><span class="token constant">ID</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token comment">/// VRF on-chain state account, it&#39;ll be the \`network_state\` account in the CPI call.</span>
    config<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">NetworkState</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// VRF program address to invoke CPI</span>
    vrf<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">OraoVrf</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token comment">/// System program address to create player_state and to be used in CPI call.</span>
    system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h3 id="_3-effectuer-un-appel-cpi" tabindex="-1"><a class="header-anchor" href="#_3-effectuer-un-appel-cpi" aria-hidden="true">#</a> 3. Effectuer un appel CPI</h3>`,8),Rn=s("Dans le framework Anchor, il existe un "),Dn=n("code",null,"CpiContext",-1),Pn=s(" \xE0 cet effet (veuillez consulter la "),An={href:"https://book.anchor-lang.com/anchor_in_depth/CPIs.html",target:"_blank",rel:"noopener noreferrer"},In=s("section correspondante"),En=s(" du Livre d'Anchor):"),Vn=t(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> cpi_program <span class="token operator">=</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>vrf<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cpi_accounts <span class="token operator">=</span> <span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span>cpi<span class="token punctuation">::</span>accounts<span class="token punctuation">::</span></span><span class="token class-name">Request</span> <span class="token punctuation">{</span>
    payer<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    network_state<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    treasury<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>treasury<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    request<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    system_program<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>system_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cpi_ctx <span class="token operator">=</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>context<span class="token punctuation">::</span></span><span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>cpi_program<span class="token punctuation">,</span> cpi_accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">orao_solana_vrf<span class="token punctuation">::</span>cpi<span class="token punctuation">::</span></span><span class="token function">request</span><span class="token punctuation">(</span>cpi_ctx<span class="token punctuation">,</span> force<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_4-utiliser-le-caractere-aleatoire-obtenu" tabindex="-1"><a class="header-anchor" href="#_4-utiliser-le-caractere-aleatoire-obtenu" aria-hidden="true">#</a> 4. Utiliser le caract\xE8re al\xE9atoire obtenu</h3><p>Notre contrat d\xE9rive le r\xE9sultat du tour \xE0 partir du caract\xE8re al\xE9atoire obtenu, le tour \xE9tant consid\xE9r\xE9e comme en cours si le caract\xE8re al\xE9atoire n&#39;est pas encore obtenu :</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// Last round outcome.</span>
<span class="token attribute attr-name">#[derive(Debug, Clone, Copy, PartialEq, Eq)]</span>
<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">CurrentState</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Player is alive and able to play.</span>
    <span class="token class-name">Alive</span><span class="token punctuation">,</span>
    <span class="token comment">/// Player is dead and can&#39;t play anymore.</span>
    <span class="token class-name">Dead</span><span class="token punctuation">,</span>
    <span class="token comment">/// Player is waiting for current round to finish.</span>
    <span class="token class-name">Playing</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Derives last round outcome.</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">current_state</span><span class="token punctuation">(</span>randomness<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Randomness</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">CurrentState</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>randomness<span class="token punctuation">)</span> <span class="token operator">=</span> randomness<span class="token punctuation">.</span><span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token function">is_dead</span><span class="token punctuation">(</span>randomness<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CurrentState</span><span class="token punctuation">::</span><span class="token class-name">Dead</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">CurrentState</span><span class="token punctuation">::</span><span class="token class-name">Alive</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">CurrentState</span><span class="token punctuation">::</span><span class="token class-name">Playing</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Decides whether player is dead or alive.</span>
<span class="token keyword">fn</span> <span class="token function-definition function">is_dead</span><span class="token punctuation">(</span>randomness<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
    <span class="token comment">// use only first 8 bytes for simplicyty</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> randomness<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">u64</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">u64</span><span class="token punctuation">::</span><span class="token function">from_le_bytes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>`,4);function Nn(Fn,Ln){const a=o("ExternalLinkIcon");return c(),l(u,null,[i,k,d,n("ol",null,[m,b,n("li",null,[_,n("ul",null,[n("li",null,[h,n("a",f,[v,e(a)]),g])])])]),y,q,n("ol",null,[n("li",null,[x,n("a",C,[w,e(a)]),S]),n("li",null,[R,n("a",D,[P,e(a)]),A])]),I,n("p",null,[E,n("a",V,[N,e(a)]),F]),L,n("p",null,[K,n("a",T,[O,e(a)]),z,B,H,n("a",U,[j,e(a)]),G]),J,M,n("p",null,[Y,n("a",Z,[Q,e(a)]),W]),X,n("p",null,[$,n("a",nn,[sn,e(a)]),an,en,tn]),pn,n("p",null,[on,n("a",cn,[ln,e(a)]),un]),rn,n("p",null,[kn,n("a",dn,[mn,e(a)]),bn]),_n,hn,fn,n("p",null,[vn,n("a",gn,[yn,e(a)]),qn,n("a",xn,[Cn,e(a)]),wn]),Sn,n("p",null,[Rn,Dn,Pn,n("a",An,[In,e(a)]),En]),Vn],64)}var Tn=p(r,[["render",Nn]]);export{Tn as default};
